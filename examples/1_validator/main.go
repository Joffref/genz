//go:generate go build -buildmode=plugin -o main.so main.go

package main

import (
	"bytes"
	"github.com/Joffref/genz/pkg/generator"
	"github.com/Joffref/genz/pkg/models"
	"io"
)

func MyCustomGenerator(file io.Writer, element models.ParsedElement) error {
	err := generator.
		NewCode(file, element.PackageName).
		WithHeaderComments("File generated by GenZ with template validator").
		WithImports("fmt", "unicode").
		WithDeclarations(
			generator.
				Function("Validate").
				WithReceiver("v", element.Type.InternalName, false).
				WithReturns("error").
				WithBody(body(element.Element)),
		).
		Generate()
	if err != nil {
		return err
	}
	return nil
}

func body(element models.Element) string {
	var buf bytes.Buffer
	for _, attribute := range element.Attributes {
		if attribute.Type.InternalName == "string" {
			for _, comment := range attribute.Comments {
				if comment == "+required" {
					buf.WriteString("if v." + attribute.Name + " == \"\" {\n")
					buf.WriteString("return fmt.Errorf(\"attribute '" + attribute.Name + "' must be set\")\n")
					buf.WriteString("}\n")
				}
				if comment == "+startsWithCapital" {
					buf.WriteString("if v." + attribute.Name + " != \"\" && !unicode.IsUpper(rune(v." + attribute.Name + "[0])) {\n")
					buf.WriteString("return fmt.Errorf(\"attribute '" + attribute.Name + "' should start with a capital letter\")\n")
					buf.WriteString("}\n")
				}
			}
		}
	}
	buf.WriteString("return nil")
	return buf.String()
}
